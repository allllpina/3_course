# Lab 2 - Composite*, flyweight and proxy

from abc import ABC, abstractmethod

# === –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å (Component) ===
class CommandUnit(ABC):
    @abstractmethod
    def execute_command(self, command):
        pass

# === –°–æ–ª–¥–∞—Ç (Leaf) ===
class Soldier(CommandUnit):
    def __init__(self, name):
        self.name = name

    def execute_command(self, command):
        print(f"–°–æ–ª–¥–∞—Ç {self.name} –≤–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É: {command}")

# === –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è/–ì—Ä—É–ø–∞ (Composite) ===
class Squad(CommandUnit):
    def __init__(self, name):
        self.name = name
        self.members = []

    def add(self, unit: CommandUnit):
        self.members.append(unit)

    def remove(self, unit: CommandUnit):
        self.members.remove(unit)

    def execute_command(self, command):
        print(f"üîä –í—ñ–¥–¥–∞—î—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞ '{command}' –≤–∑–≤–æ–¥—É {self.name}:")
        for member in self.members:
            member.execute_command(command)


# –°–æ–ª–¥–∞—Ç–∏
s1 = Soldier("–Ü–≤–∞–Ω")
s2 = Soldier("–ü–µ—Ç—Ä–æ")
s3 = Soldier("–û–ª–µ–≥")
s4 = Soldier("–°–µ—Ä–≥—ñ–π")

# –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è 1
squad1 = Squad("1-–µ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è")
squad1.add(s1)
squad1.add(s2)

# –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è 2
squad2 = Squad("2-–µ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è")
squad2.add(s3)
squad2.add(s4)

# –í–∑–≤–æ–¥
platoon = Squad("–≤–∑–≤–æ–¥ 101")
platoon.add(squad1)
platoon.add(squad2)

# –í—ñ–¥–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É
platoon.execute_command("–ö—Ä–æ–∫–æ–º —Ä—É—à!")
print()
s1.execute_command("–°—Ç—ñ–π!")
