# Lab 3 - Command* and chain of responsibility

from abc import ABC, abstractmethod

# === Receiver ===
class FastFoodOrder:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        print(f"‚ûï –î–æ–¥–∞–Ω–æ: {item}")
        self.items.append(item)

    def remove_item(self, item):
        if item in self.items:
            print(f"‚ûñ –í–∏–¥–∞–ª–µ–Ω–æ: {item}")
            self.items.remove(item)
        else:
            print(f"‚ö†Ô∏è –°—Ç—Ä–∞–≤—É '{item}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ!")

    def show_order(self):
        print("\nüßæ –ü–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
        for i, item in enumerate(self.items, 1):
            print(f"{i}. {item}")
        if not self.items:
            print("üîπ –ü–æ—Ä–æ–∂–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")

# === Command Interface ===
class Command(ABC):
    @abstractmethod
    def execute(self):
        pass

# === Concrete Commands ===
class AddItemCommand(Command):
    def __init__(self, order: FastFoodOrder, item):
        self.order = order
        self.item = item

    def execute(self):
        self.order.add_item(self.item)

class RemoveItemCommand(Command):
    def __init__(self, order: FastFoodOrder, item):
        self.order = order
        self.item = item

    def execute(self):
        self.order.remove_item(self.item)

# === Invoker ===
class Waiter:
    def __init__(self):
        self.history = []

    def take_order(self, command: Command):
        self.history.append(command)
        command.execute()

# === Client code ===

order = FastFoodOrder()
waiter = Waiter()
# –ö–ª—ñ—î–Ω—Ç —Ñ–æ—Ä–º—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
waiter.take_order(AddItemCommand(order, "–ë—É—Ä–≥–µ—Ä"))
waiter.take_order(AddItemCommand(order, "–ö–∞—Ä—Ç–æ–ø–ª—è —Ñ—Ä—ñ"))
waiter.take_order(AddItemCommand(order, "–ö–æ–∫–∞-–ö–æ–ª–∞"))
waiter.take_order(RemoveItemCommand(order, "–ö–∞—Ä—Ç–æ–ø–ª—è —Ñ—Ä—ñ"))
waiter.take_order(RemoveItemCommand(order, "–°—É—à—ñ"))
order.show_order()
