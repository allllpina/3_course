# Lab 7 - fork/join*

from concurrent.futures import ThreadPoolExecutor

# ==== –°—É–º–∞ —á–∞—Å—Ç–∏–Ω–∏ —Å–ø–∏—Å–∫—É ====
def partial_sum(numbers):
    print(f"–û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—É–º–∏ –¥–ª—è –ø—ñ–¥—Å–ø–∏—Å–∫—É: {numbers}")
    return sum(numbers)

# ==== –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è Fork/Join ====
def parallel_sum(data, num_parts=4):
    # –†–æ–∑–±–∏–≤–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
    chunk_size = len(data) // num_parts
    chunks = [data[i * chunk_size: (i + 1) * chunk_size] for i in range(num_parts - 1)]
    chunks.append(data[(num_parts - 1) * chunk_size:])  # –æ—Å—Ç–∞–Ω–Ω—ñ–π —à–º–∞—Ç–æ–∫
    
    with ThreadPoolExecutor() as executor:
        # fork ‚Äî –æ–±—á–∏—Å–ª—é—î–º–æ —Å—É–º–∏ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        futures = [executor.submit(partial_sum, chunk) for chunk in chunks]
        
        # join ‚Äî –æ–±'—î–¥–Ω—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        total = sum(f.result() for f in futures)

    return total

# ==== –ó–∞–ø—É—Å–∫ ====

numbers = list(range(1, 1001))  # —Å–ø–∏—Å–æ–∫ –≤—ñ–¥ 1 –¥–æ 1000
result = parallel_sum(numbers, num_parts=4)
print(f"\nüî¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {result}")
